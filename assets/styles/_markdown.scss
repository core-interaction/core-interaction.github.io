> article {
	@extend %type--layout;

	// Sequential spacing between `p`.
	--typography--leading-shoulder: calc(var(--typography--font-size) * (var(--typography--leading) + var(--typography--shoulder) * 2));

	min-height: 30vh;

	// Basics.
	h1 { display: none } // So we don’t forget.

	> *:not(:first-child) { margin-top: var(--margin--top, var(--typography--leading-shoulder)) }

	h2 {
		--margin--top: var(--margin--vertical--4);

		+ * {
			--margin--top:           var(--margin--vertical--2);
			--margin--top--previous: var(--margin--vertical--4);

			+ * { --margin--top--previous: var(--margin--vertical--2) }
		}
	}

	h3 { --margin--top: var(--margin--vertical--2) }



	// Manual spacing decisions.
	.two-above {
		--margin--top: var(--margin--vertical--2);

		+ * { --margin--top--previous: var(--margin--vertical--2) }
	}

	.two-below + * { --margin--top: var(--margin--vertical--2) }

	.four-above {
		--margin--top: var(--margin--vertical--6); // Actually six, keeping the name to retain Markdown compatibility with TI.

		+ * { --margin--top--previous: var(--margin--vertical--6) }
	}

	.four-below + * { --margin--top: var(--margin--vertical--6) }



	// “Disabled” looking stuff.
	.faded { opacity: 0.4 }



	// Quotes/callouts.
	blockquote {
		font-style: italic;

		&.callout {
			background:    var(--color--alpha);
			border-radius: var(--border--radius);
			display:       flex;
			font-style:    normal;
			padding:       2ch;

			&[icon]:before {
				@extend .icon--emoji;

				color:        var(--color);
				content:      attr(icon);
				margin-left:  initial;
				margin-right: 2ch;
				margin-top:   var(--typography--margin--top);
			}
		}

		&.pull-quote {
			border-left-color: var(--color);
			border-left-style: solid;
			border-left-width: var(--divider--width);
			padding-left:      calc(5ch - var(--divider--width));
			padding-right:     5ch;

			// Credit.
			> blockquote:last-child {
				font-style: normal;
				margin-top: var(--margin);

				> p > a:only-child {
					@extend %font--underline--disable;

					&:after {
						@extend .icon--sf;
						@extend .center--x;

						--icon--shift: 0.15em; // Not sure why this needs more?

						content: '↗';
					}
				}
			}
		}
	}



	// Links.
	a {
		@extend %link--text;
		@extend %font--underline;

		--color: var(--link--color);

		color: var(--link--color);
	}

	// Prominence for link-only paragraphs/li.
	.link-only > a,
	.link-only > p > a {
		@extend %font--underline--disable;
		@extend %icon--link;
	}

	p {
		max-width: 70ch;
	}



	// Lists.
	ul,
	ol {
		display:             grid;
		gap:                 var(--typography--between);
		list-style-position: outside;

		> li {
			@extend %typography; // For paragraph-less lists.

			display:    list-item;
			margin-top: var(--typography--margin--top);
			max-width:  60ch;

			&:before { display: none } // Collides with the marker, so we use the margin.

			> h3,
			> h4,
			> p {
				padding-left: 1ch;

				&:first-child:before,
				&:last-child:after { display: none }; // Since the `li` is a type element.

				&:not(:first-child) { margin-top: var(--typography--leading-shoulder) }
				&:not(:only-child):last-child { margin-bottom: calc(var(--typography--font-size) * var(--typography--leading)) }
			}

			&:not(:first-child) > *:first-child { margin-top: calc(var(--typography--font-size) * var(--typography--leading)) }
		}
	}

	ul {
		list-style-type: '-';
		padding-left:    1ch;

		> li { padding-left: 1ch }
	}

	ol {
		// TODO This does not work with paragraph lists.
		counter-reset: list;

		> li:before {
			content:           counter(list) ':';
			counter-increment: list;
			display:           inline-block;
			visibility:        visible;
			width:             4ch;
		}
	}



	// Tables.
	table {
		width: fit-content;

		tr:not(:first-child) > td { border-top: var(--typography--leading-shoulder) solid transparent }
		tr > td:not(:first-child) { border-left: var(--margin) solid transparent }
	}



	// Open/close details/summary.
	details {
		> summary {
			@extend %link--element;

			--color: var(--color--links);

			> p {
				margin-bottom: var(--typography--margin--bottom);

				&:after {
					@extend .icon--sf;

					--icon--scale: 1.25;

					content:    '+';
					visibility: visible; // Override typography pseudo.
					width:      1ch;
				}
			}
		}

		&[open] > summary > p:after {content: '-' }

		// The contents.
		> div { margin-top: var(--typography--leading-shoulder) }

		+ * { --margin--top: var(--margin--vertical--2) }
	}



	// Images!
	figure {
		--margin--top: var(--margin--vertical--2);

		display:        flex;
		flex-direction: column;
		width:          fit-content;

		> img {
			max-height:      var(--max--height, 66vh);
			object-fit:      contain; // This will do, for now.
			object-position: left;
		}

		> figcaption {
			margin-top: var(--typography--between);

			> p > a {
				@extend %font--underline--disable;

				&:only-child span:not(._) { margin-left: initial }
			}
		}

		+ * {
			--margin--top:           var(--margin--vertical--2);
			--margin--top--previous: var(--margin--vertical--2);

			+ * { --margin--top--previous: var(--margin--vertical--2) }
		}
	}



	aside {
		@extend .right;

		--margin--top: var(--margin--vertical--2);

		> h3 { margin-bottom: var(--margin--vertical) }

		> menu {
			@extend %type--layout;

			--typography--leading: var(--typography--leading--loose);

			@include breakpoint(568) { --typography--leading: var(--typography--leading--base) }

			display:        flex;
			flex-direction: column;
			gap:            var(--typography--between);

			> li > a { @extend %link--element }
		}

		> figure:not(:first-child) { margin-top: var(--typography--between) }

		+ * {
			--margin--top: var(--margin--vertical--2);

			@include breakpoint(568) { --margin--top: initial }
		}
	}



	// Lower for the cascade.
	hr,
	blockquote {
		--margin--top: var(--margin--vertical--4);

		+ * {
			--margin--top:           var(--margin--vertical--4);
			--margin--top--previous: var(--margin--vertical--4);

			+ * { --margin--top--previous: var(--margin--vertical--4) }
		}
	}


	// Column stuff.
	@include breakpoint(568) {
		align-items:           start;
		display:               grid;
		grid-template-columns: repeat(3, minmax(0, 1fr));
		column-gap:            var(--margin);

		> * { grid-column: 1 / span 3 } // Everything full width, by default.

		.left {
			grid-column:   1 / span 2;
			padding-right: var(--margin);

			&:first-child + .right { --margin--top: 0rem; }
			&:not(:first-child)+ .right { --margin--top: var(--margin--top--previous) }
		}

		.right {
			grid-column: 3 / span 1;
		}

		.left,
		.right {
			@for $row from 1 through 12 {
				&[rows="#{$row}"] {
					grid-row: span $row;
				}
			}
		}
	}
}
